В качестве инструмента анализа памяти виртуальной машины был выбран JConsole - Java Monitoring & Management console.
Альтернативные инструменты:
- утилита jmap - нет той наглядности, что есть у JConsole, необходимы дополнительные инструменты для анализа дампов.
- плагин Intellij IDEA VisualGC - тоже подходит, но было решено ознакомиться с инструментом, поставляемым с JDK.

JConsole позволяет наглядно, в виде графиков, оценить количество занимамаемой памяти приложением, использование памяти в куче, количество потоков, количество загруженных классов, использование процессорного времени, а также предоставляет краткое текстовое резюме по каждому из пунктов.

В анализе приложения Tracker выявлено, что при ограниченном объеме кучи 4 МиБ приложение не всегда запускается, независимо от типа сборщика мусора, а если и запускается, то время работы до ошибки OutOfMemoryError небольшое. Проблема в том, что абсолютное большинство "обязательных" для работы приложения объектов размещаются в tenured (old gen) и для них не хватает места при таком объеме кучи. В основном, ошибки происходят в потоке "main" по причинам "GC overhead limit exceeded", "Java heap space" или в потоке "RMI TCP Connection(idle)". Увеличение максимального размера кучи до 8 МиБ решает эту проблему при условии малой интенсивности выполнения операций добавления, обновления, получения, редактирования, удаления заявок.
При повышении интенсивности целесообразно увеличить объем кучи.

При выходе программы за пределы памяти, VM останавливается, память освобождается.
